{{#error_message}}
    <div class="cash_error cash_{{element_type}}_error">
        {{error_message}}
    </div>
{{/error_message}}



<div class="cm-store cm-item item-{{item_id}}">
   <div class="cm-store cm-inner">
   <h2>{{item_name}}</h2>
   <span class="cm-itemprice">{{currency}}{{item_price}}{{#item_flexible_price}} {{copy_flexibleprice_suffix}}{{/item_flexible_price}}</span>
   <div class="cm-description">{{{item_description}}}</div>
   {{#is_available}}
   {{#attributes}}
      <select class="cm-attribute" name="{{name}}" data-key="{{key}}" data-itemid="{{item_id}}" data-totalattributes="{{attributes_count}}" data-attributeorder="{{index}}">
         <option value="resetattributes" {{#defaultcountermenu}}data-countermenu='{{defaultcountermenu}}'{{/defaultcountermenu}}>{{copy_choose_verb}} {{key}}</option>
         {{#items}}
         <option value="{{key}}" {{#countermenu}}data-countermenu='{{countermenu}}'{{/countermenu}}>{{key}}</option>
         {{/items}}
      </select>
   {{/attributes}}
   {{#item_flexible_price}}
   <span class="cm-store-flexible-price">
      <span class="cm-store-currency">{{currency}}</span>
      <input type="text" name="total_price" data-itemid="{{item_id}}" data-atleast="{{item_price}}" class="cm-price" value="{{item_price}}" />
   </span>
   {{/item_flexible_price}}
   <button type="button"{{^json_keys}} data-legacykeys="1"{{/json_keys}} data-itemid="{{item_id}}" data-price="{{item_price}}" class="button cm-buynow cm-item-{{item_id}}"{{#has_variants}} disabled="disabled"{{/has_variants}}>{{#has_variants}}{{copy_choose_variants}}{{/has_variants}}{{^has_variants}}<span class="cm-price">{{currency}}{{item_price}}</span> - {{copy_buy}}{{/has_variants}}</button>
   {{/is_available}}
   {{^is_available}}
      <span class="cm-unavailable">
         {{copy_unavailable}}
      </span>
   {{/is_available}}
   </div>
</div>



<script>
   /*
    var cm = window.cashmusic;
    var allowclick = true; // preventing double click

    cm.events.add(cm, 'ready', function (e) {

        cm.loadScript(cm.path + 'checkout/checkout.js', function () {
            cm.events.add(document.getElementById('buy_button'), 'click', function (e) {
                e.preventDefault();

                // get stripe public key or fail
                {{#public_key}}
                    var stripe_public_key = "{{public_key}}";
                {{/public_key}}

                {{^public_key}}
                    var stripe_public_key = false;
                {{/public_key}}

                // set shipping with regions, or to false if there is no shipping
                {{#no_shipping}}
                    var shipping = false;
                {{/no_shipping}}

                {{^no_shipping}}
                    var shipping = {
                        "r1": "{{region1_name}} (${{region1_cost}})",
                        "r2": "{{region2_name}} (${{region2_cost}})"
                    };
                {{/no_shipping}}

                if (allowclick) {
                    cm.checkout.begin({
                        "stripe": stripe_public_key,
                        "paypal": true,
                        "currency": "{{currency}}", // USD = auto default
                        "shipping": shipping, // or bool true for no region selector
                        "testing": true
                    });

                    cm.events.add(cm, 'checkoutdata', function (payment) {

                        cm.overlay.hide();
                        console.log(payment.detail);

                        var elementForm = document.getElementById('cash_{{element_type}}_form_{{element_id}}');

                        // set connection id by selection
                        // calculate totals based on region + product pricing
                        var original_price = elementForm.elements['total_price'].value;

                        // add shipping to form
                        if (payment.detail.shipping) {
                            var shipping = 0;

                            if (payment.detail.shipping['shipping-region'] == "r1") {
                                shipping = {{region1_cost}};
                            }

                            if (payment.detail.shipping['shipping-region'] == "r2") {
                                shipping = {{region2_cost}};
                            }

                            if (shipping > 0) {
                                var price = parseFloat(shipping) + parseFloat(original_price);
                                elementForm.elements['total_price'].value = price;
                            }
                        }
                        // submit form
                        elementForm.submit();


                        if (payment.detail.paypal == true) {
                            console.log("PAYPAL");
                        }

                        if (payment.detail.stripe == true) {
                            console.log("STRIPE");
                        }


                    });

                    allowclick = false;
                    setTimeout(function () {
                        allowclick = true;
                    }, 1000); // only one click per second
                }
            });
        });
    });
    */
</script>



<script type="text/javascript">
	var cm = window.cashmusic;

	cm.events.add(cm,'ready', function(e) {

		{{#session_id}}
			cm.session.setid(JSON.stringify({
				"endpoint": window.location.href.split('/').slice(0,3).join('/'),
				"expiration": Math.floor(new Date().getTime() /1000) + 10800,
				"id": "{{session_id}}"
			}));
		{{/session_id}}
		cm.session.start();

		// sort all the cart buttons
		var buttons = document.querySelectorAll('.cm-buynow');
		if (buttons.length > 0) {
			for (var i = 0, len = buttons.length; i < len; i++) {
				cm.events.add(buttons[i],'click', function(e) {
					if (this.innerHTML != '{{copy_added}}') {
						var submitUrl = window.location.href.split('/embed/')[0]+'/payload';
						var poststring = 'cash_request_type=commerce&cash_action=addtocart&item_id=' + this.getAttribute('data-itemid') + '&price=' + this.getAttribute('data-price');
						if (this.getAttribute('data-variantid')) {
							poststring += '&item_variant='+ encodeURIComponent(this.getAttribute('data-variantid'));
						}

						cm.ajax.send(submitUrl, poststring,
							function(r) {
								flashCartButton();
								var el = e.target;
								if(e.target.getAttribute('type') != 'button') {
									el = e.target.parentNode; // if the span is clicked use the button parent
								}
								var returnTxt = e.target.innerHTML;
								el.innerHTML = '{{copy_added}}';
								setTimeout(function() {
									el.innerHTML = returnTxt;
								},2200);
							}
						);
					}
					e.preventDefault();
					return false;
				});
			}
		}

		// keep prices correct
		var prices = document.querySelectorAll('input.cm-price');
		if (prices.length > 0) {
			for (var i = 0, len = prices.length; i < len; i++) {
				cm.events.add(prices[i],'keyup', function(e) {
					var newprice = parseFloat(this.value);
					if (newprice) {
						if (newprice > this.getAttribute('data-atleast')) {
							var pricespan = document.querySelector('button.cm-buynow.cm-item-' + this.getAttribute('data-itemid') + ' span.cm-price');
							if (pricespan) {
								pricespan.innerHTML = '{{currency}}' + newprice.toFixed(2);
							}
							document.querySelector('button.cm-buynow.cm-item-' + this.getAttribute('data-itemid')).setAttribute('data-price',newprice.toFixed(2))
						}
					}
					e.preventDefault();
					return false;
				});

				cm.events.add(prices[i],'blur', function(e) {
					this.value = document.querySelector('button.cm-buynow.cm-item-' + this.getAttribute('data-itemid')).getAttribute('data-price');
				});
			}
		}

		// item variants
		var attributes = document.querySelectorAll('select.cm-attribute');
		if (attributes.length > 0) {
			for (var i = 0, len = attributes.length; i < len; i++) {
				cm.events.add(attributes[i],'blur', function(e) {
					var b = document.querySelector('button.cm-buynow.cm-item-' + e.target.getAttribute('data-itemid'));

					if (e.target.getAttribute('data-totalattributes') > 1) {
						var allselects = e.target.parentNode.querySelectorAll('select');
						var otherselect = false;
						for (var ii = 0, l = allselects.length; ii < l; ii++) {
							if (allselects[ii] != e.target) {
								otherselect = allselects[ii];
								break;
							}
						}

						if (otherselect) {
							var supportedoptions = JSON.parse(e.target.options[e.target.selectedIndex].getAttribute('data-countermenu').replace('&apos;', '\''));
							var otheroptions = otherselect.querySelectorAll('option');
							for (var i = 0, len = otheroptions.length; i < len; i++) {
								otheroptions[i].setAttribute('disabled','disabled');
								if (otheroptions[i].value == 'resetattributes' || supportedoptions.indexOf(otheroptions[i].value) !== -1) {
									otheroptions[i].removeAttribute('disabled');
								}
							}
							if (e.target.value != 'resetattributes' && otherselect.value != 'resetattributes') {
								if (b.getAttribute('data-legacykeys')) {
									var thisid = e.target.getAttribute('data-key')+'->'+e.target.value;
									var otherid = otherselect.getAttribute('data-key')+'->'+otherselect.value;
									if (e.target.getAttribute('data-attributeorder') == 0) {
										var attributekey = thisid+'+'+otherid;
									} else {
										var attributekey = otherid+'+'+thisid;
									}
								} else {
									var attributekey = {};
									if (e.target.getAttribute('data-attributeorder') == 0) {
										attributekey[e.target.getAttribute('data-key').replace('&apos;', '\'')] = e.target.value.replace('&apos;', '\'');
										attributekey[otherselect.getAttribute('data-key').replace('&apos;', '\'')] = otherselect.value.replace('&apos;', '\'');
									} else {
										attributekey[otherselect.getAttribute('data-key').replace('&apos;', '\'')] = otherselect.value.replace('&apos;', '\'');
										attributekey[e.target.getAttribute('data-key').replace('&apos;', '\'')] = e.target.value.replace('&apos;', '\'');
									}
									attributekey = JSON.stringify(attributekey);
								}
								b.setAttribute('data-variantid',attributekey);
								b.removeAttribute('disabled');
								b.innerHTML = '<span class="cm-price">{{currency}}'+b.getAttribute('data-price')+'</span> - {{copy_buy}}';
							} else {
								b.removeAttribute('data-variantid');
								b.setAttribute('disabled','disabled');
								b.innerHTML = '{{copy_choose_variants}}';
							}
						}
					} else {
						if (e.target.value != 'resetattributes') {
							b.setAttribute('data-variantid',e.target.getAttribute('data-key')+'->'+e.target.value);
							b.removeAttribute('disabled');
							b.innerHTML = '<span class="cm-price">{{currency}}'+b.getAttribute('data-price')+'</span> - {{copy_buy}}';
						} else {
							b.removeAttribute('data-variantid');
							b.setAttribute('disabled','disabled');
							b.innerHTML = '{{copy_choose_variants}}';
						}
					}
				});
				cm.events.add(attributes[i],'change', function(e) {
					e.target.blur(); // using change to fire blur gives us change events consistently. ff doesn't do auto-blur, ios safari doesn't do change
				});
			}
		}
	});
</script>
